#!/bin/bash

version="1.1"

usage () {
cat << EOF

This is jekesa version $version
Written by Stanford Kwenda <https://github.com/stanikae/jekesa>

jekesa (Illuminate) is a bacteria assembly and typing pipeline which primarily uses Illumina paired-end reads as input

usage: $0 <options>

OPTIONS:
        -p      Path to output directory or project name
        -f      Path to file with list of sample IDs (one ID per line)
        -a      Select the assembler to use. Options available: 'spades', 'skesa'
                (default='spades')
        -s      Species scheme name to use for mlst typing.
		This option is required for streptococcus pneumoniae in order to allow detailed analysis. Use: 'spneumoniae'.
		To check other available schema names use: mlst --longList. Otherwise if you don't know your schema use: 'noScheme'.
        -t      Number of threads to use <integer>, (minimum value should be: 6)
        -h      Show this help
        -v      Show version

For citation use:
For more information, please visit: https://github.com/stanikae/jekesa

EOF
}

while getopts ":hvp:f:t:a:s:" opt; do
  case ${opt} in
    p )
      declare -x project=${OPTARG}
      ;;
    f )
      declare -x filename=${OPTARG}
      ;;
    a )
      declare -x assembler=${OPTARG}
      ;;
    s )
      declare -x MLSTscheme=${OPTARG}
      ;;
    t )
      declare -x threads=${OPTARG}
      if [[ "$threads" -lt 6 ]]; then
        echo "Please use a higher value for threads"
        echo "Use [$0 -h] to see minimum thread value"
        exit
      fi
      ;;
    h )
      usage
      exit 1
      ;;
    v )
      echo "Version: $version"
      exit 0
      ;;
    \? )
      echo "Invalid option: $OPTARG"
      echo "Use [$0 -h] to see valid input options"
      exit 1
      ;;
    : )
      echo "Argument missing for option: $OPTARG"
      echo "Use [$0 -h] to see required arguments"
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

#if [ $# == 0 ]; then
#	usage
#	exit 1
#fi



echo -e "Parameters supplied by the User"
echo -e "$project\t$filename\t$assembler\t$threads\t$MLSTscheme\n"
declare -x projectName=$(basename $project)
declare -x SCRIPTS_DIR=${BASH_SOURCE%/*}/bin
declare -x DATABASES_DIR=${BASH_SOURCE%/*}/db
declare -x SPN_SCRIPTS_DIR=${BASH_SOURCE%/*}/spn_scripts
declare -x GAS_SCRIPTS_DIR=${BASH_SOURCE%/*}/GAS_scripts
declare -x srst2=/home/stanford/anaconda3/envs/srst2/bin/srst2

# create working directory if it's not already available
if ! [ -d "$project" ]
 then
	# get the fastq files for the specified sample IDs and create output/project directory
	$SCRIPTS_DIR/find_link_modified_14Feb19.sh $project $filename

	# create reports directory
	now=$(date +"%d_%b_%Y")
	declare -x reportsDir=$project/Reports_${projectName}_${now}
	mkdir -p $reportsDir

 else
	declare -x reportsDir=$(find $project -name "Reports_${projectName}_*" -type d )
	#$(find $project -name $project/Reports_${projectName}_*) # reports directory
fi


# Beginning bacterial typing steps

now=$(date +"%d_%b_%Y")
# QC
#declare -x fastqc_out=$(find $project -maxdepth 1 -name "fastqcReports*" -type d )
declare -x trimgaloreDir=$(find $project -name "trimGalore*" -type d )
##
declare -x krakenDir=$(find $project -name "kraken*" -type d )
declare -x spadesDir=$project/spades\_$now
declare -x statsDir=$project/assemblyMetrics\_$now
declare -x quastDir=$statsDir/quast_$now
declare -x mlstDir=$project/mlst_output\_$now
declare -x aribaDir=$project/ariba_${now}_analysis

if [[ "$MLSTscheme" == "spneumoniae" ]]
 then
	declare -x serobaDir=$project/seroba_${now}_analysis
	declare -x pilusDir=$project/pili_${now}_analysis
	declare -x pbpDir=$project/pbp-typing_${now}_analysis
	mkdir -p $serobaDir
	mkdir -p $pilusDir
	mkdir -p $pbpDir
fi

if [[ "$MLSTscheme" == "spyogenes" ]]
 then
#        declare -x serobaDir=$project/seroba_${now}_analysis
#        declare -x pilusDir=$project/pili_${now}_analysis
        declare -x pbpDir=$project/pbp-typing_${now}_analysis
#        mkdir -p $serobaDir
#        mkdir -p $pilusDir
        mkdir -p $pbpDir
fi

# kraken directory
if ! [ -d "$krakenDir" ]
 then
        declare -x krakenDir=$project/kraken\_$now
        mkdir -p $krakenDir
fi

# directory for QC before quality filtering
#if ! [ -d "$fastqc_out" ]
# then
#	declare -x fastqc_out=$project/fastqcReports\_$now
#	mkdir -p $fastqc_out
#fi

# mkdir for trimgalore
if ! [ -d "$trimgaloreDir" ]
 then
	declare -x trimgaloreDir=$project/trimGalore\_$now
#	declare -x qcReports=$trimgaloreDir/fastqcReports_filtered
	declare -x trimmedReads=$trimgaloreDir/clean_reads
	mkdir -p $trimgaloreDir
#	mkdir -p $qcReports
	mkdir -p $trimmedReads
	#$SCRIPTS_DIR/fastq_trimming_trmGalore.sh
 else
	declare -x trimgaloreDir=$(find $project -name "trimGalore*" -type d ) #$project/trimGalore*
#        declare -x qcReports=$(find $trimgaloreDir -name "fastqcReports_filtered*" -type d ) #$trimgaloreDir/fastqcReports_filtered
        declare -x trimmedReads=$(find $trimgaloreDir -name "clean_reads" -type d )
fi

mkdir -p $spadesDir
mkdir -p $quastDir
mkdir -p $mlstDir
mkdir -p $aribaDir

# check if MLST scheme is present in the mlst database
mlst --longlist > $project/schemeList.txt
declare -x schemeList=$project/schemeList.txt
##############################################################################################################

## databases ##
# ariba reference database
declare -x ariba_ref=$DATABASES_DIR/ariba_DBs/out.card.prepareref
# minikraken database
declare -x krakenDB=/media/60tb/src/kraken/NCBI
# seroba database
declare -x db_dir=$DATABASES_DIR/seroba_db
# PBP typing using CDC Strep Lab scripts and database
#declare -x allDB_dir=$DATABASES_DIR/SPN_Reference_DB

###############################################################################################################

#echo -e "\nStarting quality control of sequencing reads for sample: $samples"; date
#echo -e "\n==============================================================="
#nohup $SCRIPTS_DIR/fastqc_check_server.sh &

for sampleID in $(cat $filename)
 do 
	# performing bacterial de novo genome assembly
	declare -x samples=$sampleID
	echo "\nStarting quality filtering of sequencing reads using trimGalore for sample: $samples"; date
        echo -e "=================================================================\n"
	nohup $SCRIPTS_DIR/trim-reads.sh &
	wait
	
        echo "\nStarting species identification using kraken for sample: $samples"; date
        echo -e "==================================================================\n"
	declare -x filteredReads=$krakenDir/$samples
	mkdir -p $filteredReads
        nohup $SCRIPTS_DIR/kraken_classification_step.sh &
        wait
	
	# delete linked input fastq files
	rm $project/*${sampleID}*.f*q.gz
		
	fileTest=`find $filteredReads -maxdepth 1 -name "${samples}*val_1*.gz"`
	fileTest2=`find $filteredReads -maxdepth 1 -name "${samples}*val_2*.gz"`

	if [ -s "$fileTest" ]; then
		if [ -s "$fileTest2" ]; then 
			#echo "files exist"; fi; fi

			date
			echo -e "\nPerforming bacterial de novo genome assembly using spades and MLST typing for sample: $samples"
			echo -e "===============================================================\n"
			
			if [[ "$assembler" == "spades" ]]; then
			    nohup $SCRIPTS_DIR/spades_assembly_server.sh & 
			else 
			    nohup $SCRIPTS_DIR/skesa_assembly.sh &
			fi
			# Detection of resistance genes, virulence factors and plasmid detection
			date
        		echo -e "\nPerforming detection of resistance genes using ARIBA for sample: $samples"
        		echo -e "===============================================================\n"
			nohup $SCRIPTS_DIR/ariba_typing_server.sh & 

			# serotyping of S. pneumon using seroBA
			if [[ "$MLSTscheme" == "spneumoniae" ]]
			 then
				date
				echo -e "\n$MLSTscheme is spneumoniae, now performing in silico serotyping for sample: $samples"
				echo -e "===============================================================\n"
				nohup $SCRIPTS_DIR/seroba_serotyping_server.sh & 

			fi

			wait
			echo -e "\nTyping of $sampleID completed, moving to next sample"
			echo -e "===============================================================\n"

		else
			echo -e "$samples did not pass the kraken step, skipping ................\n"
		fi
	else
		echo -e "\n $fileTest has not been found, moving to next ID `date`"
	fi

done


# combine all fastqc reports using mulitQC
#date
#nohup multiqc -o $reportsDir/${projectName}-beforeQC $fastqc_out --pdf --export --filename ${projectName}_b4_qc &

# Compiling post filtering reports
#date
#nohup multiqc -o $reportsDir/${projectName}-postQC $qcReports --pdf --export --filename ${projectName}_post_qc &

# QUAST multiqc reports
nohup multiqc -o $reportsDir/${projectName}-quast-post-kraken $quastDir --pdf --export --filename $projectName\_quast &

# combining all assembly metrics using custom R script
Rscript $SCRIPTS_DIR/combining_quast_output.R $quastDir $reportsDir/${projectName}_quastResults.xlsx

# saving mlst typing .csv results to xlsx format
if [[ "$MLSTscheme" == "noScheme" ]]; then
  names1=$(echo -e "FILE\tSCHEME\tST")
  num1=$(cat $mlstDir/mlst_allele.tsv | head -n1 | awk '{print NF}')
  num="$(($10-3))" #"$(($num1-3))"
  names2=$(yes "gene" | head -n $num | paste -s -d '\t' -)
  names=$(echo -e "$names1\t$names2")
  (echo $names | tr ' ' '\t') > $mlstDir/mlst_merged.tsv && awk -v OFS='\t' '{gsub(/_.*/,"",$1);print}' $mlstDir/mlst_allele.tsv >> $mlstDir/mlst_merged.tsv
else
  (head -n1 $mlstDir/mlst_allele.tsv) > $mlstDir/mlst_merged.tsv && \
  grep -v "^FILE" $mlstDir/mlst_allele.tsv  | awk -v OFS='\t' '{gsub(/_.*/,"",$1);print}' >> $mlstDir/mlst_merged.tsv
fi

# saving mlst typing .csv results to xlsx format
if [ -e $mlstDir/mlst_merged.tsv ]; then
  Rscript $SCRIPTS_DIR/converting_tsv_2_xlsx.R $mlstDir/mlst_merged.tsv $reportsDir/${projectName}_mlstResults.xlsx
fi


# summarizing the identified resistance genes
ariba summary $aribaDir/${projectName}-ariba.summary `find $aribaDir -name "*-report.tsv"`
# editing the report summary
if [[ "$MLSTscheme" == "spneumoniae" ]]; then
  cat $aribaDir/${projectName}-ariba.summary.csv | sed 's|.*\.run/||' | sed 's|-report.tsv||' | sed 's|Streptococcus_pneumoniae|SPN|g' > $aribaDir/${projectName}-ariba-final.csv
else
  cat $aribaDir/${projectName}-ariba.summary.csv | sed 's|.*\.run/||' | sed 's|-report.tsv||' > $aribaDir/${projectName}-ariba-final.csv
fi
# writing ariba report to xlsx
Rscript $SCRIPTS_DIR/converting_csv_2_xlsx.R $aribaDir/${projectName}-ariba-final.csv $reportsDir/${projectName}-ariba_final.xlsx

# seroba output compilation
if [[ "$MLSTscheme" == "spneumoniae" ]]; then
  cd $serobaDir
  seroba summary  $serobaDir
  (echo -e "sample_Id\tserotype\tcomments\t" && cat summary.tsv) | tr '\t' ',' | awk -F, '{gsub("/.*/","",$1)}1' OFS=, > $serobaDir/summary_header.csv
  # save seroba results to xlsx excel workbook
  Rscript $SCRIPTS_DIR/converting_csv_2_xlsx.R  $serobaDir/summary_header.csv $reportsDir/${projectName}_serobaResults.xlsx
  cd $HOME
fi

# save kraken report to csv and convert to .xlsx
#reportTopHits=$filteredReads/${name}.kraken.report-top-4.txt

inDir=$krakenDir #$project/kraken
outDir=$krakenDir #$project/kraken

# if [[ "$MLSTscheme" == "spneumoniae" ]]; then
	# echo "assembly,kraken_(%),kraken_unclassified(%)" > $outDir/${projectName}-kraken_combinedReports.csv
echo "assembly,kraken_match_#1,kraken_match_#2,kraken_match_#3,kraken_unclassified," > $outDir/${projectName}-kraken_combinedReports.csv	

for file in $(find $inDir -name "*.kraken.report-top-4.txt"); do
  name=$(basename -s .kraken.report-top-4.txt $file)
  report1=$(cat $file | sed 's/,[[:space:]]\+/,/' | sort -t ',' -k1,1nr | awk -F ',' '{print $NF, "("$1"%)"}' | tr '\n' ',')
		
  #report1=$(cat $file | awk -F '\t' '{print $1, $NF}' | grep "Streptococcus pneumoniae$" | awk '{print $2"_"$NF,"("$1"%)"}')
  #report2=$(cat $file | awk -F '\t' '{print $1, $NF}' | grep -w "unclassified$" | awk '{print $NF,"("$1"%)"}')
  #echo -e "$name,$report1,$report2" >> $outDir/${projectName}-kraken_combinedReports.csv
  echo -e "$name,$report1" >> $outDir/${projectName}-kraken_combinedReports.csv
done

# convert .csv to .xlsx
Rscript $SCRIPTS_DIR/converting_csv_2_xlsx.R $outDir/${projectName}-kraken_combinedReports.csv $reportsDir/${projectName}-kraken_combinedReports.xlsx

# Perform SPN pili detection analysis
if [[ "$MLSTscheme" == "spneumoniae" ]]; then
  $SCRIPTS_DIR/SPN-pili-detection.sh
fi

# Perform PBP typing using scripts adapted from Ben Metcalf at CDC, USA
if [[ "$MLSTscheme" == "spneumoniae" ]]; then
  # PBP typing using CDC Strep Lab scripts and database
  declare -x allDB_dir=$DATABASES_DIR/SPN_Reference_DB	
  declare -x batch_dir=$krakenDir #/home/stanford/kedibone/CRDM-08r/kraken #/41467
  declare -x out_dir=$project
  declare -x batch_name=$projectName  #$(basename $project)
  declare -x out_analysis=$pbpDir
        
  #bash /home/stanford/repos/bacteria_denovo_assembly/SPN-typing_jobInputFile.sh
  $SCRIPTS_DIR/SPN-typing_kraken-jobInputFile.sh

  # Perform SPN typing for each sample
  if [ -s "$out_analysis/job-control.txt" ]; then
    while read -r line; do
      $SCRIPTS_DIR/SPN-Typer_stan.sh "$line"
    done < $out_analysis/job-control.txt
  fi

  # convert output file to xlsx
  Rscript $SCRIPTS_DIR/convert_SPN-PBP-Typing-Results_2_xlsx.R $out_analysis/TABLE_SPN_"$batch_name"_Typing_Results.txt $reportsDir/${projectName}_pbp-typing.xlsx

fi

# Perform emm typing using scripts adapted from Ben Metcalf at CDC, USA
if [[ "$MLSTscheme" == "spyogenes" ]]; then
  # PBP typing using CDC Strep Lab scripts and database
  declare -x allDB_dir=$DATABASES_DIR/GAS_Reference_DB
  declare -x batch_dir=$krakenDir #/home/stanford/kedibone/CRDM-08r/kraken #/41467
  declare -x out_dir=$project
  declare -x batch_name=$projectName  #$(basename $project)
  declare -x out_analysis=$pbpDir

  #bash /home/stanford/repos/bacteria_denovo_assembly/SPN-typing_jobInputFile.sh
  $GAS_SCRIPTS_DIR/StrepLab-JanOw_GAS-wrapr.sh

  # Perform GAS typing for each sample
  if [ -s "$out_analysis/job-control.txt" ]; then
    while read -r line; do
      $GAS_SCRIPTS_DIR/StrepLab-JanOw_GAS-Typer.sh "$line" </dev/null
    done < $out_analysis/job-control.txt
  fi

  # convert output file to xlsx
  Rscript $SCRIPTS_DIR/convert_SPN-PBP-Typing-Results_2_xlsx.R $out_analysis/TABLE_GAS_"$batch_name"_Typing_Results.txt $reportsDir/${projectName}_pbp-typing.xlsx

fi

# merge selected assembly metrics, mlst results, seroba output

# ${projectName}_quast-dataQC.xlsx
# ${projectName}_pili-results.xlsx # pili output file

if [[ "$MLSTscheme" == "spneumoniae" ]]; then
  Rscript $SCRIPTS_DIR/merging_reports.R $reportsDir ${projectName}_quastResults.xlsx ${projectName}_mlstResults.xlsx ${projectName}-ariba_final.xlsx ${projectName}-kraken_combinedReports.xlsx ${projectName}_serobaResults.xlsx ${projectName}_WGS-typing-report.xlsx ${projectName}_pili-results.xlsx ${projectName}_pbp-typing.xlsx

elif [[ "$MLSTscheme" == "spyogenes" ]]; then
 Rscript $SCRIPTS_DIR/merging_reports.R $reportsDir ${projectName}_quastResults.xlsx ${projectName}_mlstResults.xlsx ${projectName}-ariba_final.xlsx ${projectName}-kraken_combinedReports.xlsx ${projectName}_WGS-typing-report.xlsx ${projectName}_pbp-typing.xlsx
 
else
 Rscript $SCRIPTS_DIR/merging_reports.R $reportsDir ${projectName}_quastResults.xlsx ${projectName}_mlstResults.xlsx ${projectName}-ariba_final.xlsx ${projectName}-kraken_combinedReports.xlsx ${projectName}_WGS-typing-report.xlsx

fi

date
value=$(wc -l $filename | awk '{print $1}')
echo -e "Analysis of ${value} samples completed"
echo "==================================================================="
echo -e "===============================================================\n"
