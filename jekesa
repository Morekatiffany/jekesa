#!/bin/bash

version="1.0"

usage () {
cat << EOF

This is jekesa version $version
Written by Stanford Kwenda <https://github.com/stanikae/jekesa>

jekesa (Illuminate) is a bacteria assembly and typing pipeline which primarily uses Illumina paired-end reads as input

usage: $0 <options>

OPTIONS:
        -p      Path to output directory or project name
        -a      Select the assembler to use. Options available: 'spades', 'skesa', 'velvet', 'megahit'
        -s      Species scheme name to use for mlst typing.
		Use: 'spneumoniae' or 'spyogenes' or 'senterica', for streptococcus pneumoniae or streptococcus pyogenes or salmonella 
                detailed analysis. Otherwise for any other schema use: 'other'. To check other available schema names use: mlst --longList.
        -t      Number of threads to use <integer>, (minimum value should be: 6)
	-g	Only perform de novo assembly
	-c	Path to assembled contigs to include in the typing analysis. 
        -h      Show this help
        -v      Show version

For citation use:
For more information, please visit: https://github.com/stanikae/jekesa

EOF
}

while getopts ":hvp:t:a:s:c:g" opt; do
  case ${opt} in
    p )
      declare -x project=${OPTARG}
      ;;
    a )
      declare -x assembler=${OPTARG}
      ;;
    s )
      declare -x MLSTscheme=${OPTARG}
      ;;
    t )
      declare -x threads=${OPTARG}
      if [[ "$threads" -lt 6 ]]; then
        echo "Please use a higher value for threads"
        echo "Use [$0 -h] to see minimum thread value"
        exit
      fi
      ;;
    g )
      declare -x assemOnly="yes"
      if [ $# -lt 4 ]; then
      echo "Additional arguments missing needed for option: ${OPTARG}"
      echo "Use [$0 -h] to see full arguments"
      exit 1
      fi
      ;;
    c )
      declare -x contigsPath=${OPTARG}
      ;;
    h )
      usage
      exit
      ;;
    v )
      echo "Version: $version"
      exit 0
      ;;
    \? )
      echo "Invalid option: $OPTARG"
      echo "Use [$0 -h] to see valid input options"
      exit 1
      ;;
    : )
      echo "Argument missing for option: $OPTARG"
      echo "Use [$0 -h] to see required arguments"
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# If no parameters are provided, display usage
if [ -z $project ]; then
	usage
	exit 1
fi

if [[ $MLSTscheme == "other" ]]; then
    MLSTscheme="noScheme"
fi

# cretae global variables
echo -e "\t[`date +"%d-%b-%Y %T"`]\tParameters supplied by the User:"
echo -e "\t\tProject name: $project\n\t\tAssembler: $assembler\n\t\tThreads: $threads\n\t\tMLSTscheme: $MLSTscheme"
declare -x projectName=$(basename $project)
declare -x SCRIPTS_DIR=${BASH_SOURCE%/*}/bin
declare -x DATABASES_DIR=${BASH_SOURCE%/*}/db
declare -x SPN_SCRIPTS_DIR=${BASH_SOURCE%/*}/spn_scripts
declare -x GAS_SCRIPTS_DIR=${BASH_SOURCE%/*}/GAS_scripts

## Export path to R conda enviroments
export PATH="$HOME/anaconda3/envs/r_env/bin:$PATH"

# create results directory
declare -x now=$(date +"%d_%b_%Y")
if ! [ -d "$project" ]
 then
	echo -e "\n\tError: $project doesn't exist ......."
        echo -e "\tFirst run [${BASH_SOURCE%/*}/bin/find-link-fastq.sh] and link your fastq files to the work directory"
        echo -e "\t[`date +"%d-%b-%Y %T"`]\tExiting........\n"
	exit

 else
        declare -x reportsDir=$project/Results-${projectName}
	# create tmp directory
 	if ! [ -d $project/tmp ]; then
	  mkdir -p $project/tmp
        fi
	# create results directory
	if ! [ -d $reportsDir ]; then
	 mkdir -p $reportsDir
      	fi
fi

#################################################################################
## 			Set-up paths to databases 			       ##
#################################################################################
# ariba reference database
declare -x ariba_ref=$DATABASES_DIR/ariba_DBs/nu.resfinder.prepareref  #out.card.prepareref
declare -x ariba_VFref=$DATABASES_DIR/ariba_DBs/out.vfdb_core.prepareref
# minikraken database
declare -x krakenDB=$DATABASES_DIR/kraken_db
# seroba database
declare -x db_dir=$DATABASES_DIR/seroba_db
# rMLST database
declare -x confindrDB=$DATABASES_DIR/confindr_db
# resfinder and poinfinder db
declare -x res_db=$DATABASES_DIR/resfinder_db
declare -x point_db=$DATABASES_DIR/pointfinder_db

# check if progress file exists
if [ ! -f $project/progress ]; then
 touch $project/progress
fi

##################################################################################
###			Define variables 				   #######
##################################################################################
declare -x trimgaloreDir=$project/trimGalore
declare -x qcReports=$trimgaloreDir/fastqcReports_filtered
declare -x trimmedReads=$trimgaloreDir/clean_reads
declare -x spadesDir=$project/assemblies
###################################################################################
###                          Begin bacterial WGS typing                         ###
###################################################################################

# STEP 01: Perform QC or raw reads
stage=$(grep "fastqc-step01" "$project/progress")
if [ -z "$stage" ]; then
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting quality control of sequencing reads for project: $projectName"
  declare -x fastqc_out=$project/fastqcReports
  if [ -d $fastqc_out ]; then
    rm -r $fastqc_out
    mkdir -p $fastqc_out
  else
    mkdir -p $fastqc_out
  fi
  nohup $SCRIPTS_DIR/01.fastq_qc.sh > $fastqc_out/fastqc_check.log 2>&1 &
  echo "fastqc-step01" >> $project/progress
else
 echo -e "\t[`date +"%d-%b-%Y %T"`]\tQuality control of raw reads for project: $projectName already completed, moving to next step"
fi

# STEP 02: Perform read filtering and QC of clean reads
stage=$(grep "trimGalore-step02" "$project/progress")
if [ -z "$stage" ]; then
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting quality filtering of sequencing reads using trimGalore for project: $projectName"
  #declare -x trimgaloreDir=$project/trimGalore
  #declare -x qcReports=$trimgaloreDir/fastqcReports_filtered
  #declare -x trimmedReads=$trimgaloreDir/clean_reads
  if [ -d $trimgaloreDir ]; then
    rm -r $trimgaloreDir
    mkdir -p $trimgaloreDir; mkdir -p $qcReports; mkdir -p $trimmedReads
  else
    mkdir -p $trimgaloreDir; mkdir -p $qcReports; mkdir -p $trimmedReads
  fi

  $SCRIPTS_DIR/02.trimReads.sh >> $trimgaloreDir/trimGalore.log 2>&1
  echo "trimGalore-step02" >> $project/progress
else
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tRead filtering for project: $projectName already completed, moving to next step"
fi

# STEP 03: Count both raw and cleaned reads;and estimate coverage depth
stage=$(grep "countReads-step03" "$project/progress")
if [ -z "$stage" ]; then
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tCount raw and cleaned reads for sample: $samples"
  declare -x readsDir=$project/total_reads
  if [ -d $readsDir ]; then
    rm -r $readsDir
    mkdir -p $readsDir
  else
    mkdir -p $readsDir
  fi
  nohup $SCRIPTS_DIR/03.get_coverageDepth.sh >> $project/tmp/get_coverageDepth.log 2>&1 &
  nohup $SCRIPTS_DIR/03.countReads.sh >> $readsDir/count_reads.log 2>&1 &
  wait
  echo "countReads-step03" >> $project/progress
else
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tRead counting for project: $projectName already completed, moving to next step"
fi

# STEP 04: Species identification
stage=$(grep "speciesID-step04" "$project/progress")
if [ -z "$stage" ]; then
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting species identification using kraken2 and bactInspector"
  declare -x krakenDir=$project/kraken
  declare -x confindrDir=$project/confindr
  declare -x bactInspectorDir=$project/bactInspector
  if [ -d $krakenDir ]; then
    rm -r "$krakenDir" "$krakenDir" "$confindrDir"
    mkdir -p $krakenDir; mkdir -p $confindrDir; mkdir -p $bactInspectorDir
  else
    mkdir -p $krakenDir; mkdir -p $confindrDir; mkdir -p $bactInspectorDir
  fi
  nohup $SCRIPTS_DIR/04.kraken2_classification.sh >> $krakenDir/kraken2.log 2>&1
  nohup $SCRIPTS_DIR/04.bactInspector.sh >> $bactInspectorDir/bactinspector.log 2>&1
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tChecking inter- and intra-species contamination"
  nohup $SCRIPTS_DIR/04.confindr.sh >> $confindrDir/confindr.log 2>&1
  echo "speciesID-step04" >> $project/progress
else
 echo -e "\t[`date +"%d-%b-%Y %T"`]\tSpecies identification for project: $projectName already completed, moving to next step"
fi

# STEP 05: De novo assembly and mlst typing
stage=$(grep "assembly-step05" "$project/progress")
if [ -z "$stage" ]; then
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tPerforming bacterial de novo genome assembly and MLST typing"
  #declare -x spadesDir=$project/assemblies
  declare -x statsDir=$project/assemblyMetrics
  declare -x quastDir=$statsDir/quast
  declare -x mlstDir=$project/mlst_output
  if [ -d $spadesDir ]; then
    rm -r "$spadesDir" "$statsDir" "$quastDir" "$mlstDir"
    mkdir -p $spadesDir; mkdir -p $statsDir; mkdir -p $quastDir; mkdir -p $mlstDir
  else
   mkdir -p $spadesDir; mkdir -p $statsDir; mkdir -p $quastDir; mkdir -p $mlstDir
  fi
  # perform de novo assembly
  $SCRIPTS_DIR/05.shovill.sh >> $spadesDir/shovill_assembly.log 2>&1
  # check if MLST scheme is present in the mlst database
  #mlst --longlist > $project/schemeList.txt
  #declare -x schemeList=$project/schemeList.txt
  #nohup $SCRIPTS_DIR/05.mlst.sh >> $mlstDir/mlst.log 2>&1
  #wait
  #echo "assembly-step05" >> $project/progress

  # check if contigs directory path is provided
  if [[ -d $contigsPath ]]; then
    mkdir -p $spadesDir/previousContigs
    for contFile in $contigsPath/*.f*a
      do
        pref=$(echo $contFile | awk -F "." '{print $NF}')
        id=$(basename -s .${pref} $contFile)
        rsync -c $contFile $spadesDir/previousContigs/${id}_assembly.fasta
        echo -e "\t[`date +"%d-%b-%Y %T"`]\tAdded previously assembled contigs to project: $projectName"
    done
  fi
  # check if MLST scheme is present in the mlst database
  mlst --longlist > $project/schemeList.txt
  declare -x schemeList=$project/schemeList.txt
  nohup $SCRIPTS_DIR/05.mlst.sh >> $mlstDir/mlst.log 2>&1
  wait

  # check assembly only variable
  if [[ -n $assemOnly ]]; then
    $SCRIPTS_DIR/05.merge-assemblyOnly-results.R $reportsDir \
    ${projectName}-denovo-assembly-report.xlsx > $project/tmp/05.merge.assemblyOnly.results.log 2>&1
    # soft link assembled contigs to results directory
    #mkdir -p $reportsDir/assembled-contigs
    #find $spadesDir -maxdepth 2 -type f -name "*_assembly.fasta" -exec ln -s {} $reportsDir/assembled-contigs/ \;
    echo -e "\t[`date +"%d-%b-%Y %T"`]\tCompleted de novo assembly for project: $projectName .... now exiting"
    exit
  fi
  echo "assembly-step05" >> $project/progress
else
 echo -e "\t[`date +"%d-%b-%Y %T"`]\tDe novo assembly and MLST typing for project: $projectName already completed, moving to next step"
fi

# STEP 06: AMR, virulence genes and plasmid prediction
stage=$(grep "amr-step06" "$project/progress")
if [ -z "$stage" ]; then
  echo -e "\t[`date +"%d-%b-%Y %T"`]\tPerforming detection of resistance genes and virulence factors using ARIBA"
  declare -x aribaDir=$project/ariba
  declare -x aribaVF_Dir=$project/aribaVF
  declare -x resfinder=$project/resfinder
  declare -x pointfinder=$project/pointfinder
  declare -x plasmidDir=$project/plasmids
  if [ -d $aribaDir ]; then
    rm -r "$aribaDir" "$aribaVF_Dir" "$resfinder" "$pointfinder" "$plasmidDir"
    mkdir -p $aribaDir; mkdir -p $aribaVF_Dir; mkdir -p $resfinder; mkdir -p $pointfinder; mkdir -p $plasmidDir
  else
    mkdir -p $aribaDir; mkdir -p $aribaVF_Dir; mkdir -p $resfinder; mkdir -p $pointfinder; mkdir -p $plasmidDir
  fi
  # run resfinder and pointfinder
  nohup $SCRIPTS_DIR/06.cgeAMR.sh >> $project/tmp/cgeAMR.log 2>&1
  # run ariba for AMR and VF detection
  nohup $SCRIPTS_DIR/06.aribaAMR.sh >> $aribaDir/ariba_AMRtyping.log 2>&1
  nohup $SCRIPTS_DIR/06.aribaVFs.sh >> $project/tmp/ariba_VFtyping.log 2>&1
  wait 
  # merge and write ariba AMR and VF reports to xlsx
  Rscript $SCRIPTS_DIR/merge_files.R $reportsDir \
  ${projectName}-aribaAMR-known_variants-final.xlsx \
  ${projectName}-aribaVFs-known_variants-final.xlsx \
  ${projectName}-ariba_final.xlsx >> $project/tmp/merge_files.log 2>&1
  echo "amr-step06" >> $project/progress
else
 echo -e "\t[`date +"%d-%b-%Y %T"`]\tPrediction of AMR, VFs, and plasmids for project: $projectName already completed, moving to next step"
fi

# STEP 07: Species specific indepth analysis for Salmonella, SPN and GBS
stage=$(grep "specific-step07" "$project/progress")
if [ -z "$stage" ]; then

 if [[ "$MLSTscheme" == "spneumoniae" ]]; then
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tMLST scheme is $MLSTscheme, now performing Spneumoniae specifc analysis"
   declare -x serobaDir=$project/seroba
   declare -x pilusDir=$project/pili
   declare -x pbpDir=$project/pbp-typing
   if [ -d $serobaDir ]; then
     rm -r "$serobaDir" "$pilusDir" "$pbpDir"
     mkdir -p $serobaDir; mkdir -p $pilusDir; mkdir -p $pbpDir
   else
     mkdir -p $serobaDir; mkdir -p $pilusDir; mkdir -p $pbpDir
   fi
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting S. pneumoniae serotyping"
   nohup $SCRIPTS_DIR/07.seroba.sh >> $serobaDir/seroba.log 2>&1
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting S. pneumoniae pili detection"
   $SCRIPTS_DIR/07.SPN-pili-detection.sh
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting S. pneumoniae PBP typing using CDC StrepLab scripts"
   # PBP typing using CDC Strep Lab scripts and database
   declare -x allDB_dir=$DATABASES_DIR/SPN_Reference_DB
   declare -x batch_dir=$trimmedReads #krakenDir #/home/stanford/kedibone/CRDM-08r/kraken #/41467
   declare -x out_dir=$project
   declare -x batch_name=$projectName  #$(basename $project)
   declare -x out_analysis=$pbpDir
   # create SPN-typing job input file
   $SCRIPTS_DIR/07.SPN-typing-jobInputFile.sh
   # Perform SPN typing for each sample
   if [ -s "$out_analysis/job-control.txt" ]; then
     while read -r line; do
        $SCRIPTS_DIR/07.SPN-Typer.sh "$line"
     done < $out_analysis/job-control.txt
   fi
   # convert output file to xlsx
   Rscript $SCRIPTS_DIR/convert_SPN-PBP-Typing-Results_2_xlsx.R \
           $out_analysis/TABLE_SPN_"$batch_name"_Typing_Results.txt \
           $reportsDir/07.SPN-pbp-typing.xlsx >> $project/tmp/convert_SPN-PBP-Typing.log 2>&1
   # Run PopPunk analysis for S. pneumoniae
   bash $SCRIPTS_DIR/07.poppunk.sh $project
 
 elif [[ "$MLSTscheme" == "spyogenes" ]]; then
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tMLST scheme is $MLSTscheme, now performing Spyogenes specifc analysis"
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tStarting S. pyogenes EMM typing using CDC StrepLab scripts"
   declare -x pbpDir=$project/pbp-typing
   if [ -d $pbpDir ]; then
     rm -r "$pbpDir"
     mkdir -p $pbpDir
   else
     mkdir -p $pbpDir
   fi
   # PBP typing using CDC Strep Lab scripts and database
   declare -x allDB_dir=$DATABASES_DIR/GAS_Reference_DB
   declare -x batch_dir=$trimmedReads
   declare -x out_dir=$project
   declare -x batch_name=$projectName  #$(basename $project)
   declare -x out_analysis=$pbpDir
   # create GAS job input file
   $GAS_SCRIPTS_DIR/StrepLab-JanOw_GAS-wrapr.sh
   # Perform GAS typing for each sample
   if [ -s "$out_analysis/job-control.txt" ]; then
     while read -r line; do
        $GAS_SCRIPTS_DIR/StrepLab-JanOw_GAS-Typer.sh "$line" </dev/null
     done < $out_analysis/job-control.txt
   fi
   # convert output file to xlsx
   Rscript $SCRIPTS_DIR/convert_SPN-PBP-Typing-Results_2_xlsx.R \
           $out_analysis/TABLE_GAS_"$batch_name"_Typing_Results.txt \
           $reportsDir/07.GAS-typing.xlsx >> $project/tmp/convert_GAS-PBP-Typing.log 2>&1
   # Run PopPunk analysis for S. pyogenes
   bash $SCRIPTS_DIR/07.poppunk.sh $project

 elif [[ "$MLSTscheme" == "senterica" ]]; then
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tMLST scheme is $MLSTscheme, now performing Salmonella specifc analysis"
   declare -x sistr=$project/sistr
   declare -x seqsero=$project/seqsero
   if [ -d $sistr ]; then
     rm -r "$sistr" "$seqsero"
     mkdir -p $sistr; mkdir -p $seqsero
   else
     mkdir -p $sistr; mkdir -p $seqsero
   fi
   nohup $SCRIPTS_DIR/07.salmonella.sh >> $project/tmp/07.salmonella.log 2>&1
 else
   echo -e "\t[`date +"%d-%b-%Y %T"`]\tIndepth SPN, GAS, and salmonella specific analysis not required for $projectName"
 fi
 echo "specific-step07" >> $project/progress
else
 echo -e "\t[`date +"%d-%b-%Y %T"`]\tSpecies specific for: $projectName already completed, moving to next step"
fi


# delete linked input fastq files
counter=0
for fq1 in $project/*R1*f*q*
 do
  fq2=$(echo $fq1 | awk -F "R1" '{print $1 "R2" $2}')
  counter=$((counter+1))
  if [ -h $fq1 ]; then
    if [ -h $fq2 ]; then
      rm ${fq1} ${fq2}
    fi
  fi
done

#############################################################################################################
###                          Construct phylogenetic tree of samples in this analysis                      ###
#############################################################################################################
# construct phylogenetic tree of samples in this analysis
#Rscript -e 'library(readr);library(readxl);library(tidyverse); 
#tab=read_excel("Reports_191031_M02621_26_May_2020/191031_M02621_WGS-typing-final-report.xlsx"); write_csv(tab, "spn_db/info_csv.csv")'
#Rscript -e 'library(readr);library(readxl);library(tidyverse); tab=read_excel("Reports_191031_M02621_26_May_2020/191031_M02621_WGS-typing-final-report.xlsx"); tab=dplyr::select(tab,SampleID,GPSC,Pili,serotype,SCHEME,ST,PBP1A,PBP2B,PBP2X);write_csv(tab, "spn_db/info_csv.csv")'

# edit info.csv file to match sampleID name with assembly fasta output e.g. for sample_assembly.fasta ==> sample_assembly
# run poppunk
#nohup bash ../poppunk-launcher.sh poppunk-analysis/reference_list.txt spn_db/info_csv.csv /media/60tb/uct/felix/191025_M02143_rpt/spn_db > spn_db/spn_db.log 2>&1


#############################################################################################################
###                          Save results to the final results excel (.xlsx) file                         ###
#############################################################################################################
echo -e "\t[`date +"%d-%b-%Y %T"`]\tSaving final bacterial WGS typing report to MS Excel for project $projectName"
Rscript $SCRIPTS_DIR/09.merge_results.R $MLSTscheme $reportsDir ${projectName}-WGS-typing-report.xlsx > $project/tmp/09.merge.results.log 2>&1 

#value=$(wc -l $filename | awk '{print $1}')
echo -e "\t[`date +"%d-%b-%Y %T"`]\tAnalysis of ${counter} samples completed"
echo -e "\t[`date +"%d-%b-%Y %T"`]\tWGS typing results are in file: $reportsDir/${projectName}-WGS-typing-report.xlsx"

